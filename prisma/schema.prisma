datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

enum UserRole {
    XVARIATE
    CLIENT
    FREELANCER
    AMBASSADOR
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    emailVerified         DateTime?              @map("email_verified")
    image                 String?
    password              String?
    role                  UserRole               @default(CLIENT)
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    TwoFactorConfirmation TwoFactorConfirmation?
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String   @unique
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String   @unique
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorOTP {
    id      String   @id @default(cuid())
    email   String   @unique
    otp     String   @unique
    expires DateTime

    @@unique([email, otp])
}

model TwoFactorConfirmation {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId])
}
